// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "postgresql"
    url      = env("DATABASE_URL")
}

model User {
    id        String      @id
    role      Role        @default(USER)
    firstName String?
    lastName  String?
    email     String?
    orders    Order[]
    comments  Comment[]
    address   Address[]
    updateAt  DateTime    @default(now()) @updatedAt
    favorites Favorites[]
}

model Address {
    id           String   @id @default(cuid())
    user         User?    @relation(fields: [userId], references: [id])
    userId       String?
    firstName    String
    lastName     String
    contactPhone String
    point        String
    archived     Boolean  @default(false)
    Order        Order[]
    createdAt    DateTime @default(now())
    updateAt     DateTime @updatedAt
}


model Category {
    id      String    @id @default(cuid())
        title   String    @unique
        path    String  @unique
        image   String
        product Product[]
}

model Product {
    id                 String                @id @default(cuid())
        name               String
        description        String?
        image              String[]
        archived           Boolean               @default(false)
        comments           Comment[]
        category           Category?             @relation(fields: [categoryTitle], references: [title])
        categoryTitle      String?
        orders             OrderItem[]
        price Int
        size               Size[]
        favorites          Favorites[]
        additionalServices AdditionalService[]
}

model AdditionalService {
    id                       String                    @id 
    title                    String
    additionalServicesOption AdditionalServiceOption[]
    product                  Product                   @relation(fields: [productId], references: [id], onDelete: Cascade)
    productId                String
}

model AdditionalServiceOption {
    id                 String            @id 
    name               String
    price              Int
    additionalServices AdditionalService @relation(fields: [addServId], references: [id], onDelete: Cascade)
    addServId          String
}

model Size {
    id      String    @id @default(cuid())
        value   String    @unique
        product Product[]
}

model Favorites {
    productId String  @id
    product   Product @relation(fields: [productId], references: [id])
    user      User    @relation(fields: [userId], references: [id])
    userId    String
}


model Order {
    id          String      @id @default(cuid())
    orderNumber Int         @default(autoincrement())
    user        User?       @relation(fields: [userId], references: [id])
    userId      String?
    address     Address     @relation(fields: [addressId], references: [id])
    addressId   String
    status      OrderStatus @default(PENDING)
    createdAt   DateTime    @default(now())
    comment     String?
    viewed      Boolean     @default(false)
    isPayed     Boolean     @default(false)
    orderItem   OrderItem[]
    total    Float
}

model OrderItem {
    id                      String   @id @default(cuid())
    quantity                Int
    size                    String
    product                 Product  @relation(fields: [productId], references: [id])
    productId               String
    order                   Order    @relation(fields: [orderId], references: [id], onDelete: Cascade)
    orderId                 String
    additionalServiceOption String[]
}

model About {
    id        String   @id @default(cuid())
    title     String
    content   String
    createdAt DateTime @default(now())
    updateAt  DateTime @updatedAt
}

model Comment {
    id        String  @id @default(cuid())
    user      User    @relation(fields: [userId], references: [id])
    userId    String
    product   Product @relation(fields: [productId], references: [id])
    productId String
    value     String
}

model FAQ {
    id        String   @id @unique @default(cuid())
    title     String
    content   String
    createdAt DateTime @default(now())
    updateAt  DateTime @updatedAt
}

model OfflineShop {
    id          String   @id @default(cuid())
    createdAt   DateTime @default(now())
    name        String
    fullAddress String
    phone       String
    image       String
    work_time   String?
}

enum OrderStatus {
    PENDING
    PROCESSING
    COMPLETED
    CANCELLED
}

enum Role {
    ADMIN
    USER
}
